proc stream outfile=myfile prescol resetdelim='label'; 
begin

<!DOCTYPE html>
&StreamDelim NEWLINE; <html>
&StreamDelim NEWLINE; <head>
&StreamDelim NEWLINE;   <meta http-equiv="content-type" content="text/html; charset=UTF-8">
&StreamDelim NEWLINE;   <title></title>
&StreamDelim NEWLINE;   <meta http-equiv="content-type" content="text/html; charset=UTF-8">
&StreamDelim NEWLINE;   <meta name="robots" content="noindex, nofollow">
&StreamDelim NEWLINE;   <meta name="googlebot" content="noindex, nofollow">
&StreamDelim NEWLINE;   <meta name="viewport" content="width=device-width, initial-scale=1">
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   <script
&StreamDelim NEWLINE;     type="text/javascript"
&StreamDelim NEWLINE;     src="//d3js.org/d3.v3.js"
&StreamDelim NEWLINE;     
&StreamDelim NEWLINE;   ></script>
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     <link rel="stylesheet" type="text/css" href="/css/result-light.css">
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   <style id="compiled-css" type="text/css">
&StreamDelim NEWLINE;       .node rect {
&StreamDelim NEWLINE;     cursor: move;
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; .link {
&StreamDelim NEWLINE;     fill: none;
&StreamDelim NEWLINE;     stroke: #000;
&StreamDelim NEWLINE;     stroke-opacity: .2;
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; .link:hover {
&StreamDelim NEWLINE;     stroke-opacity: .5;
&StreamDelim NEWLINE; } 
 * {
&StreamDelim NEWLINE;     font: 11px sans-serif;
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; .linkLabel {
&StreamDelim NEWLINE;     z-index:10;
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   </style>
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   <!-- TODO: Missing CoffeeScript 2 -->
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   <script type="text/javascript">//<![CDATA[
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     window.onload=function(){
&StreamDelim NEWLINE;       
&StreamDelim NEWLINE; d3.sankey = function () {
&StreamDelim NEWLINE;     var sankey = {},
&StreamDelim NEWLINE;     nodeWidth = 24,
&StreamDelim NEWLINE;         nodePadding = 8,
&StreamDelim NEWLINE;         size = [1, 1],
&StreamDelim NEWLINE;         nodes = [],
&StreamDelim NEWLINE;         links = [];
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.nodeWidth = function (_) {
&StreamDelim NEWLINE;         if (!arguments.length) return nodeWidth;
&StreamDelim NEWLINE;         nodeWidth = +_;
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.nodePadding = function (_) {
&StreamDelim NEWLINE;         if (!arguments.length) return nodePadding;
&StreamDelim NEWLINE;         nodePadding = +_;
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.nodes = function (_) {
&StreamDelim NEWLINE;         if (!arguments.length) return nodes;
&StreamDelim NEWLINE;         nodes = _;
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.links = function (_) {
&StreamDelim NEWLINE;         if (!arguments.length) return links;
&StreamDelim NEWLINE;         links = _;
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.size = function (_) {
&StreamDelim NEWLINE;         if (!arguments.length) return size;
&StreamDelim NEWLINE;         size = _;
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.layout = function (iterations) {
&StreamDelim NEWLINE;         computeNodeLinks();
&StreamDelim NEWLINE;         computeNodeValues();
&StreamDelim NEWLINE;         computeNodeBreadths();
&StreamDelim NEWLINE;         computeNodeDepths(iterations);
&StreamDelim NEWLINE;         computeLinkDepths();
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.relayout = function () {
&StreamDelim NEWLINE;         computeLinkDepths();
&StreamDelim NEWLINE;         return sankey;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     sankey.link = function () {
&StreamDelim NEWLINE;         var curvature = .5;
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function link(d) {
&StreamDelim NEWLINE;             var x0 = d.source.x + d.source.dx,
&StreamDelim NEWLINE;                 x1 = d.target.x,
&StreamDelim NEWLINE;                 xi = d3.interpolateNumber(x0, x1),
&StreamDelim NEWLINE;                 x2 = xi(curvature),
&StreamDelim NEWLINE;                 x3 = xi(1 - curvature),
&StreamDelim NEWLINE;                 y0 = d.source.y + d.sy + d.dy / 2,
&StreamDelim NEWLINE;                 y1 = d.target.y + d.ty + d.dy / 2;
&StreamDelim NEWLINE;             return "M" + x0 + "," + y0 + "C" + x2 + "," + y0 + " " + x3 + "," + y1 + " " + x1 + "," + y1;
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         link.curvature = function (_) {
&StreamDelim NEWLINE;             if (!arguments.length) return curvature;
&StreamDelim NEWLINE;             curvature = +_;
&StreamDelim NEWLINE;             return link;
&StreamDelim NEWLINE;         };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         return link;
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     // Populate the sourceLinks and targetLinks for each node.
&StreamDelim NEWLINE;     // Also, if the source and target are not objects, assume they are indices.
&StreamDelim NEWLINE;     function computeNodeLinks() {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             node.sourceLinks = [];
&StreamDelim NEWLINE;             node.targetLinks = [];
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;         links.forEach(function (link) {
&StreamDelim NEWLINE;             var source = link.source,
&StreamDelim NEWLINE;                 target = link.target;
&StreamDelim NEWLINE;             if (typeof source === "number") source = link.source = nodes[link.source];
&StreamDelim NEWLINE;             if (typeof target === "number") target = link.target = nodes[link.target];
&StreamDelim NEWLINE;             source.sourceLinks.push(link);
&StreamDelim NEWLINE;             target.targetLinks.push(link);
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     // Compute the value (size) of each node by summing the associated links.
&StreamDelim NEWLINE;     function computeNodeValues() {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             node.value = Math.max(
&StreamDelim NEWLINE;             d3.sum(node.sourceLinks, value),
&StreamDelim NEWLINE;             d3.sum(node.targetLinks, value));
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     // Iteratively assign the breadth (x-position) for each node.
&StreamDelim NEWLINE;     // Nodes are assigned the maximum breadth of incoming neighbors plus one;
&StreamDelim NEWLINE;     // nodes with no incoming links are assigned breadth zero, while
&StreamDelim NEWLINE;     // nodes with no outgoing links are assigned the maximum breadth.
&StreamDelim NEWLINE;     function computeNodeBreadths() {
&StreamDelim NEWLINE;         var remainingNodes = nodes,
&StreamDelim NEWLINE;             nextNodes,
&StreamDelim NEWLINE;             x = 0;
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         while (remainingNodes.length) {
&StreamDelim NEWLINE;             nextNodes = [];
&StreamDelim NEWLINE;             remainingNodes.forEach(function (node) {
&StreamDelim NEWLINE;                 node.x = x;
&StreamDelim NEWLINE;                 node.dx = nodeWidth;
&StreamDelim NEWLINE;                 node.sourceLinks.forEach(function (link) {
&StreamDelim NEWLINE;                     nextNodes.push(link.target);
&StreamDelim NEWLINE;                 });
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE;             remainingNodes = nextNodes;
&StreamDelim NEWLINE;             ++x;
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         //
&StreamDelim NEWLINE;         moveSinksRight(x);
&StreamDelim NEWLINE;         scaleNodeBreadths((width - nodeWidth) / (x - 1));
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function moveSourcesRight() {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             if (!node.targetLinks.length) {
&StreamDelim NEWLINE;                 node.x = d3.min(node.sourceLinks, function (d) {
&StreamDelim NEWLINE;                     return d.target.x;
&StreamDelim NEWLINE;                 }) - 1;
&StreamDelim NEWLINE;             }
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function moveSinksRight(x) {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             if (!node.sourceLinks.length) {
&StreamDelim NEWLINE;                 node.x = x - 1;
&StreamDelim NEWLINE;             }
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function scaleNodeBreadths(kx) {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             node.x *= kx;
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function computeNodeDepths(iterations) {
&StreamDelim NEWLINE;         var nodesByBreadth = d3.nest()
&StreamDelim NEWLINE;             .key(function (d) {
&StreamDelim NEWLINE;             return d.x;
&StreamDelim NEWLINE;         })
&StreamDelim NEWLINE;             .sortKeys(d3.ascending)
&StreamDelim NEWLINE;             .entries(nodes)
&StreamDelim NEWLINE;             .map(function (d) {
&StreamDelim NEWLINE;             return d.values;
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         //
&StreamDelim NEWLINE;         initializeNodeDepth();
&StreamDelim NEWLINE;         resolveCollisions();
&StreamDelim NEWLINE;         for (var alpha = 1; iterations > 0; --iterations) {
&StreamDelim NEWLINE;             relaxRightToLeft(alpha *= .99);
&StreamDelim NEWLINE;             resolveCollisions();
&StreamDelim NEWLINE;             relaxLeftToRight(alpha);
&StreamDelim NEWLINE;             resolveCollisions();
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function initializeNodeDepth() {
&StreamDelim NEWLINE;             var ky = d3.min(nodesByBreadth, function (nodes) {
&StreamDelim NEWLINE;                 return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;             nodesByBreadth.forEach(function (nodes) {
&StreamDelim NEWLINE;                 nodes.forEach(function (node, i) {
&StreamDelim NEWLINE;                     node.y = i;
&StreamDelim NEWLINE;                     node.dy = node.value * ky;
&StreamDelim NEWLINE;                 });
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;             links.forEach(function (link) {
&StreamDelim NEWLINE;                 link.dy = link.value * ky;
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function relaxLeftToRight(alpha) {
&StreamDelim NEWLINE;             nodesByBreadth.forEach(function (nodes, breadth) {
&StreamDelim NEWLINE;                 nodes.forEach(function (node) {
&StreamDelim NEWLINE;                     if (node.targetLinks.length) {
&StreamDelim NEWLINE;                         var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
&StreamDelim NEWLINE;                         node.y += (y - center(node)) * alpha;
&StreamDelim NEWLINE;                     }
&StreamDelim NEWLINE;                 });
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;             function weightedSource(link) {
&StreamDelim NEWLINE;                 return center(link.source) * link.value;
&StreamDelim NEWLINE;             }
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function relaxRightToLeft(alpha) {
&StreamDelim NEWLINE;             nodesByBreadth.slice().reverse().forEach(function (nodes) {
&StreamDelim NEWLINE;                 nodes.forEach(function (node) {
&StreamDelim NEWLINE;                     if (node.sourceLinks.length) {
&StreamDelim NEWLINE;                         var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
&StreamDelim NEWLINE;                         node.y += (y - center(node)) * alpha;
&StreamDelim NEWLINE;                     }
&StreamDelim NEWLINE;                 });
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;             function weightedTarget(link) {
&StreamDelim NEWLINE;                 return center(link.target) * link.value;
&StreamDelim NEWLINE;             }
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function resolveCollisions() {
&StreamDelim NEWLINE;             nodesByBreadth.forEach(function (nodes) {
&StreamDelim NEWLINE;                 var node,
&StreamDelim NEWLINE;                 dy,
&StreamDelim NEWLINE;                 y0 = 0,
&StreamDelim NEWLINE;                     n = nodes.length,
&StreamDelim NEWLINE;                     i;
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;                 // Push any overlapping nodes down.
&StreamDelim NEWLINE;                 nodes.sort(ascendingDepth);
&StreamDelim NEWLINE;                 for (i = 0; i < n; ++i) {
&StreamDelim NEWLINE;                     node = nodes[i];
&StreamDelim NEWLINE;                     dy = y0 - node.y;
&StreamDelim NEWLINE;                     if (dy > 0) node.y += dy;
&StreamDelim NEWLINE;                     y0 = node.y + node.dy + nodePadding;
&StreamDelim NEWLINE;                 }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;                 // If the bottommost node goes outside the bounds, push it back up.
&StreamDelim NEWLINE;                 dy = y0 - nodePadding - size[1];
&StreamDelim NEWLINE;                 if (dy > 0) {
&StreamDelim NEWLINE;                     y0 = node.y -= dy;
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;                     // Push any overlapping nodes back up.
&StreamDelim NEWLINE;                     for (i = n - 2; i >= 0; --i) {
&StreamDelim NEWLINE;                         node = nodes[i];
&StreamDelim NEWLINE;                         dy = node.y + node.dy + nodePadding - y0;
&StreamDelim NEWLINE;                         if (dy > 0) node.y -= dy;
&StreamDelim NEWLINE;                         y0 = node.y;
&StreamDelim NEWLINE;                     }
&StreamDelim NEWLINE;                 }
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function ascendingDepth(a, b) {
&StreamDelim NEWLINE;             return a.y - b.y;
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function computeLinkDepths() {
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             node.sourceLinks.sort(ascendingTargetDepth);
&StreamDelim NEWLINE;             node.targetLinks.sort(ascendingSourceDepth);
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE;         nodes.forEach(function (node) {
&StreamDelim NEWLINE;             var sy = 0,
&StreamDelim NEWLINE;                 ty = 0;
&StreamDelim NEWLINE;             node.sourceLinks.forEach(function (link) {
&StreamDelim NEWLINE;                 link.sy = sy;
&StreamDelim NEWLINE;                 sy += link.dy;
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE;             node.targetLinks.forEach(function (link) {
&StreamDelim NEWLINE;                 link.ty = ty;
&StreamDelim NEWLINE;                 ty += link.dy;
&StreamDelim NEWLINE;             });
&StreamDelim NEWLINE;         });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function ascendingSourceDepth(a, b) {
&StreamDelim NEWLINE;             return a.source.y - b.source.y;
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;         function ascendingTargetDepth(a, b) {
&StreamDelim NEWLINE;             return a.target.y - b.target.y;
&StreamDelim NEWLINE;         }
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function center(node) {
&StreamDelim NEWLINE;         return node.y + node.dy / 2;
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     function value(link) {
&StreamDelim NEWLINE;         return link.value;
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     return sankey;
&StreamDelim NEWLINE; };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; /* ------------------- our code ------------------------ */
&StreamDelim NEWLINE; //var canvas = document.getElementById("chart");
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; var units = "Widgets";
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; var margin = {
&StreamDelim NEWLINE;     top: 10,
&StreamDelim NEWLINE;     right: 10,
&StreamDelim NEWLINE;     bottom: 10,
&StreamDelim NEWLINE;     left: 10
&StreamDelim NEWLINE; },
&StreamDelim NEWLINE; width = 1800 - margin.left - margin.right,
&StreamDelim NEWLINE;     height = 700 - margin.top - margin.bottom;
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; var formatNumber = d3.format(",.0f"), // zero decimal places
&StreamDelim NEWLINE;     format = function (d) {
&StreamDelim NEWLINE;         return formatNumber(d) + " " + units;
&StreamDelim NEWLINE;     },
&StreamDelim NEWLINE;     color = d3.scale.category20();
&StreamDelim NEWLINE;     
&StreamDelim NEWLINE; // append the svg canvas to the page
&StreamDelim NEWLINE; var svg = d3.select("#chart").append("svg")
&StreamDelim NEWLINE;     .attr("width", width + margin.left + margin.right)
&StreamDelim NEWLINE;     .attr("height", height + margin.top + margin.bottom)
&StreamDelim NEWLINE;     .append("g")
&StreamDelim NEWLINE;     .attr("transform",
&StreamDelim NEWLINE;     "translate(" + margin.left + "," + margin.top + ")");
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // Set the sankey diagram properties
&StreamDelim NEWLINE; var sankey = d3.sankey()
&StreamDelim NEWLINE;     .nodeWidth(10)
&StreamDelim NEWLINE;     .nodePadding(20)
&StreamDelim NEWLINE;     .size([width, height]);
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; var path = sankey.link();
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; var data = [{
&StreamDelim NEWLINE;     "source": "A",
&StreamDelim NEWLINE;         "target": "X",
&StreamDelim NEWLINE;         "value": 5
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "A",
&StreamDelim NEWLINE;         "target": "Y",
&StreamDelim NEWLINE;         "value": 7
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "A",
&StreamDelim NEWLINE;         "target": "Z",
&StreamDelim NEWLINE;         "value": 6
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "B",
&StreamDelim NEWLINE;         "target": "X",
&StreamDelim NEWLINE;         "value": 2
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "B",
&StreamDelim NEWLINE;         "target": "Y",
&StreamDelim NEWLINE;         "value": 9
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "B",
&StreamDelim NEWLINE;         "target": "Z",
&StreamDelim NEWLINE;         "value": 4
&StreamDelim NEWLINE; }, {
&StreamDelim NEWLINE;     "source": "X",
&StreamDelim NEWLINE;         "target": "L",
&StreamDelim NEWLINE;         "value": 5
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; ]; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; //set up graph in same style as original example but empty
&StreamDelim NEWLINE; graph = {
&StreamDelim NEWLINE;     "nodes": [],
&StreamDelim NEWLINE;         "links": []
&StreamDelim NEWLINE; };
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; data.forEach(function (d) {
&StreamDelim NEWLINE;     graph.nodes.push({
&StreamDelim NEWLINE;         "name": d.source
&StreamDelim NEWLINE;     });
&StreamDelim NEWLINE;     graph.nodes.push({
&StreamDelim NEWLINE;         "name": d.target
&StreamDelim NEWLINE;     });
&StreamDelim NEWLINE;     graph.links.push({
&StreamDelim NEWLINE;         "source": d.source,
&StreamDelim NEWLINE;             "target": d.target,
&StreamDelim NEWLINE;             "value": +d.value
&StreamDelim NEWLINE;     });
&StreamDelim NEWLINE; });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // return only the distinct / unique nodes
&StreamDelim NEWLINE; graph.nodes = d3.keys(d3.nest()
&StreamDelim NEWLINE;     .key(function (d) {
&StreamDelim NEWLINE;     return d.name;
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .map(graph.nodes));
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // loop through each link replacing the text with its index from node
&StreamDelim NEWLINE; graph.links.forEach(function (d, i) {
&StreamDelim NEWLINE;     graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);
&StreamDelim NEWLINE;     graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);
&StreamDelim NEWLINE; });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; //now loop through each nodes to make nodes an array of objects
&StreamDelim NEWLINE; // rather than an array of strings
&StreamDelim NEWLINE; graph.nodes.forEach(function (d, i) {
&StreamDelim NEWLINE;     graph.nodes[i] = {
&StreamDelim NEWLINE;         "name": d
&StreamDelim NEWLINE;     };
&StreamDelim NEWLINE; });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; sankey.nodes(graph.nodes)
&StreamDelim NEWLINE;     .links(graph.links)
&StreamDelim NEWLINE;     .layout(32);
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // add in the links
&StreamDelim NEWLINE; var link = svg.append("g").selectAll(".link")
&StreamDelim NEWLINE;     .data(graph.links)
&StreamDelim NEWLINE;     .enter()
&StreamDelim NEWLINE;     .append("path")
&StreamDelim NEWLINE;     .attr("class", "link")
&StreamDelim NEWLINE;     .attr("id",function(d,i) { return "linkLabel" + i; })
&StreamDelim NEWLINE;     .attr("d", path)
&StreamDelim NEWLINE;     .style("stroke-width", function (d) {
&StreamDelim NEWLINE;        return Math.max(1, d.dy);
&StreamDelim NEWLINE;     })
&StreamDelim NEWLINE;     .sort(function (a, b) {
&StreamDelim NEWLINE;        return b.dy - a.dy;
&StreamDelim NEWLINE;     })
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // add in the nodes
&StreamDelim NEWLINE; var node = svg.append("g").selectAll(".node")
&StreamDelim NEWLINE;     .data(graph.nodes)
&StreamDelim NEWLINE;     .enter().append("g")
&StreamDelim NEWLINE;     .attr("class", "node")
&StreamDelim NEWLINE;     .attr("transform", function (d) {
&StreamDelim NEWLINE;     return "translate(" + d.x + "," + d.y + ")";
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .call(d3.behavior.drag()
&StreamDelim NEWLINE;     .origin(function (d) {
&StreamDelim NEWLINE;     return d;
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .on("dragstart", function () {
&StreamDelim NEWLINE;     this.parentNode.appendChild(this);
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .on("drag", dragmove));
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // add the rectangles for the nodes
&StreamDelim NEWLINE; node.append("rect")
&StreamDelim NEWLINE;     .attr("height", function (d) {
&StreamDelim NEWLINE;     return d.dy;
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .attr("width", sankey.nodeWidth())
&StreamDelim NEWLINE;     .style("fill", function (d) {
&StreamDelim NEWLINE;     return d.color = color(d.name.replace(/ .*/, ""));
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .style("stroke", function (d) {
&StreamDelim NEWLINE;     return d3.rgb(d.color);//.darker(2);
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .append("title")
&StreamDelim NEWLINE;     .text(function (d) {
&StreamDelim NEWLINE;     return d.name + "\n" + format(d.value);
&StreamDelim NEWLINE; });
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // add in the title for the nodes
&StreamDelim NEWLINE; node.append("text")
&StreamDelim NEWLINE;     .attr("x", -6)
&StreamDelim NEWLINE;     .attr("y", function (d) {
&StreamDelim NEWLINE;     return d.dy / 2;
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .attr("dy", ".35em")
&StreamDelim NEWLINE;     .attr("text-anchor", "end")
&StreamDelim NEWLINE;     .attr("transform", null)
&StreamDelim NEWLINE;     .text(function (d) {
&StreamDelim NEWLINE;     return d.name + " (" + d.value + ")";
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .filter(function (d) {
&StreamDelim NEWLINE;     return d.x < width / 2;
&StreamDelim NEWLINE; })
&StreamDelim NEWLINE;     .attr("x", 6 + sankey.nodeWidth())
&StreamDelim NEWLINE;     .attr("text-anchor", "start");
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; /* add labels to graphs */
&StreamDelim NEWLINE; var labelText = svg.selectAll(".labelText")
&StreamDelim NEWLINE;     .data(graph.links)
&StreamDelim NEWLINE;     .enter()
&StreamDelim NEWLINE;   .append("text")
&StreamDelim NEWLINE; &StreamDelim NEWLINE;     .attr("class","labelText")
&StreamDelim NEWLINE;     .attr("dx",130)
&StreamDelim NEWLINE;     .attr("dy",0)
&StreamDelim NEWLINE;   .append("textPath")
&StreamDelim NEWLINE;     .attr("xlink:href",function(d,i) { return "#linkLabel" + i;})
&StreamDelim NEWLINE;     .text(function(d,i) {                                 
&StreamDelim NEWLINE;        if (d.value > 4) return " -> " + d.target.name + " : " + d.value;});
&StreamDelim NEWLINE; //				if (d.value > 10) return " -> " + d.value + " -> ";});
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; // the function for moving the nodes
&StreamDelim NEWLINE; function dragmove(d) {
&StreamDelim NEWLINE;     d3.select(this).attr("transform",
&StreamDelim NEWLINE;         "translate(" + d.x + "," + (
&StreamDelim NEWLINE;     d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
&StreamDelim NEWLINE;     sankey.relayout();
&StreamDelim NEWLINE;     link.attr("d", path);
&StreamDelim NEWLINE; }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   //]]></script>
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; </head>
&StreamDelim NEWLINE; <body>
&StreamDelim NEWLINE;     <p id="chart"></p>
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;   
&StreamDelim NEWLINE;   <script>
&StreamDelim NEWLINE;     // tell the embed parent frame the height of the content
&StreamDelim NEWLINE;     if (window.parent && window.parent.parent){
&StreamDelim NEWLINE;       window.parent.parent.postMessage(["resultsFrame", {
&StreamDelim NEWLINE;         height: document.body.getBoundingClientRect().height,
&StreamDelim NEWLINE;         slug: "Lsjkhzf1"
&StreamDelim NEWLINE;       }], "*")
&StreamDelim NEWLINE;     }
&StreamDelim NEWLINE; 
&StreamDelim NEWLINE;     // always overwrite window.name, in case users try to set it manually
&StreamDelim NEWLINE;     window.name = "result"
&StreamDelim NEWLINE;   </script>
&StreamDelim NEWLINE; </body>
&StreamDelim NEWLINE; </html>


;;;;





